%\VignetteIndexEntry{Trendy Vignette}
%\VignettePackage{Trendy}
%\VignetteEngine{knitr::knitr}

\documentclass{article}
\usepackage{graphicx, graphics, epsfig,setspace,amsmath, amsthm}
\usepackage{natbib}
\usepackage{moreverb}
\usepackage{float}

<<style-knitr, eval=TRUE, echo=FALSE, results="asis", tidy=TRUE>>=
BiocStyle::latex()
@

\begin{document}

\title{Trendy: Segmented regression analysis of
expression dynamics for high-throughput ordered
profiling experiments}
\author{Rhonda Bacher, Ning Leng, Ron Stewart}
\maketitle
\tableofcontents
\setcounter{tocdepth}{2}



\section{Overview}
\label{sec:intro}
Trendy is an R package fo analyzing high throughput expression data 
(e.g RNA-seq or microarray) with ordered conditions 
(e.g. time-course, spatial-course).

For each gene (or other features), Trendy fits a set of segmented 
(or breakpoint) regression models. The optimal model is chosen as 
the one with the lowest BIC. Each breakpoint represents a significant 
changes in the gene's expression across the time-course.

The top dynamic genes are then identified as those that are well 
profiled by their gene-specific segmented regression model. Trendy also
implements functions to visualize the dynamic genes and their trends, 
to order dynamic genes by their trends, and to compute breakpoint distribution
at different
time-points (e.g. detect time-points with a large number of expression 
changes).

\subsection{The model}
To illustrate Trendy, here we use time-course gene expression data as an 
example. Although, Trendy may also be applied to other types of features
(e.g. isoform or exon expression) and/or other types of experiments with
ordered conditions (e.g. spatial course).

Denote the normalized gene expression of gene $g$ and sample/time $t$ 
as $Y_{g,t}$.
Denote the total number of genes as $G$ and the total number of samples/times
as $N$.
For each gene, Trendy fits segmented regression models with varying numbers of
breakpoints from 1 to $K$. $K$ defaults to 3 but can also be specified by the
user. The \CRANpkg{segmented} R package is used to fit the segmented 
regression models.

For a given gene, among the models with varying $k$, Trendy selects the 
optimal
number of breakpoints for this gene by comparing the BIC for each model.

To avoid overfitting, the optimal number of breakpoints will be set as
$\tilde{k_g} = \tilde{k_g} -1$ if at least one segment has less than 
$c_{num}$ samples. The threshold $c_{num}$ can be specified by the user; the
default is 5.


Trendy reports the following for the optimal model:
\begin{itemize}
  \item Gene specific adjusted $R^2$ (penalized for the chosen value of $k$)
  \item Segment slopes
  \item Segment trends (and associated p-values)
  \item Breakpoint estimates
\end{itemize}

Among all genes, the top dynamic genes are defined as those whose optimal
model has high adjusted $R^2$s.

To compute the breakpoint distribution over the time-course, Trendy calculates
the number of breakpoints for each time-point across all the genes.

The time-points with high $D_t$ can be considered as those with global
expression changes.

Trendy also summarizes the fitted trend or expression pattern of top genes. 
For samples between the $i^{th}$
and $i+1 ^{th}$ breakpoint for a given gene, if the t-statistic of
the segment slope has p-value greater than $c_{pval}$,
the trend of this segment will be defined as no change. Otherwise the
trend of this segment will be defined as up/down based on the 
slope coefficient.
The default value of $c_{pval}$ is 0.1, but may also be specified by the user.

\section{Installation}

\subsection{Install via GitHub}

The Trendy package can be installed using functions in the devtools package.

To install, type the following code into R:
<<eval=FALSE, echo=TRUE, cache=FALSE, message=FALSE, warning=FALSE>>=
# install.packages("devtools")
# library(devtools)
# install_github("rhondabacher/Trendy")
@

\subsection{Install locally}

Install packages segmented, parallel, and gplots:


<<eval=FALSE, echo=TRUE>>=
# install.packages(c("segmented","gplots"))
library("segmented")
library("parallel")
library("gplots")
@

Download the Trendy package from: \url{https://github.com/rhonda/Trendy}

And install the package locally.


\subsection{Load the package}

To load the Trendy package:
<<eval=TRUE, echo=TRUE, message=FALSE>>=
library(Trendy)
@

\section{Analysis}

\subsection{Input}

The input data should be a $G-by-N$ matrix containing the expression values 
for each gene and each sample, where $G$ is the number of genes and $N$ 
is the number of samples. The samples should be sorted following the time course order.

The object \Robject{trendyExampleData} is a simulated data matrix containing 
50 rows of genes and 40 columns of samples.

<<eval=TRUE>>=
data("trendyExampleData")
str(trendyExampleData)
@

These values should exhibit expression data after normalization across
samples. For example, for RNA-seq data, the raw counts may be normalized using
MedianNorm and \Rfunction{GetNormalizedMat} function in \Biocpkg{EBSeq}:

<<eval=FALSE>>=
library(EBSeq)
Sizes <- MedianNorm(trendyExampleData)
normalizedData <- GetNormalizedMat(trendyExampleData, Sizes)
@
More details can be found in the \Biocpkg{EBSeq} vignette:

\small{\url{http://www.bioconductor.org/packages/devel/bioc/vignettes/EBSeq/inst/doc/EBSeq_Vignette.pdf}}


If you are working with microarray expression data, an extensive overview for normalization can be found in the vignette of the \Biocpkg{affy} package:

\small{\url{https://www.bioconductor.org/packages/release/bioc/html/affy.html}}








\subsection{Run Trendy}

The \Rfunction{trendy} function will fit multiple segmented regressions model 
for each gene (via the \CRANpkg{segmented} R package) and select the the 
optimal model. Here we want to only consider a maximum of two breakpoints for 
each gene.

<<eval=TRUE>>=
res <- trendy(Data = trendyExampleData, maxK = 2)
res <- results(res)
res.top <- topTrendy(res)
# default adjusted R square cutoff is 0.5
res.top$AdjustedR2
@

The \Rfunction{topTrendy} function may be used to extract top dynamic genes.
By default, \Rfunction{topTrendy} will extract genes whose adjusted 
$R^2$, $\bar{R}^{2}$,
is greater or equal to 0.5. To change this threshold, a user may specify the
\Rcode{AdjR2.Cut} parameter in the \Rfunction{topTrendy} function. The 
\Rfunction{topTrendy} function returns
the Trendy output with genes sorted decereasingly by $\bar{R}^{2}$.


By default the \Rfunction{trendy} function only considers genes whose mean 
expression is greater than 10.
To use another threshold, the user may specify the parameter 
\Robject{meanCut}.


\subsection{Visualize trends of the top dynamic genes}

\Robject{res.top\$Trend} contains the trend specification of the top genes.
The function \Rfunction{trendHeatmap} can be used to display these trends:

<<eval=TRUE, warning=FALSE, fig.width=7, fig.align='center', out.width='.8\\textwidth'>>=
res.trend <- trendHeatmap(res.top)
str(res.trend)
@

The \Rfunction{trendHeatmap} function classifies the top dynamic genes into
three groups: start with up, start with down and start with no change.
Within each group, genes are sorted by the position of the first breakpoint.


To generate an expression heatmap of the first group of genes (first go up):

<<eval=TRUE, warning=FALSE, fig.width=7, fig.align='center', out.width='.8\\textwidth', message=FALSE>>=
library(gplots)
heatmap.2(trendyExampleData[names(res.trend$firstup),],
  trace="none", Rowv=FALSE,Colv=FALSE,
	scale="row", main="top genes (first go up)")
@


Similarly, to generate an expression heatmap of the second group of genes 
(first go down):
<<eval=TRUE, warning=FALSE, fig.width=7, fig.align='center', out.width='.8\\textwidth'>>=
heatmap.2(trendyExampleData[names(res.trend$firstdown),],
  trace="none", Rowv=FALSE,Colv=FALSE,
	scale="row", main="top genes (first go down)")
@

To generate an expression heatmap of the second group of genes 
(first no change):
<<eval=TRUE, warning=FALSE, fig.width=7, fig.align='center', out.width='.8\\textwidth'>>=
heatmap.2(trendyExampleData[names(res.trend$firstnochange),],
  trace="none", Rowv=FALSE,Colv=FALSE,
	scale="row", main="top genes (first no change)",
	cexRow=.8)
@


\subsection{Visualize individual genes}
The \Rfunction{plotFeature} function may be used to plot expression of 
individual features/genes and the fitted lines.

For example, to plot the top six genes in the first group of genes (first go 
up):

<<eval=TRUE, warning=FALSE, fig.width=7, fig.align='center', out.width='1\\textwidth'>>=
par(mfrow=c(3,2))
plot1 <- plotFeature(trendyExampleData,
                    featureNames = names(res.trend$firstup)[1:6],
                    trendyOut = res)
@

The input of function \Rfunction{plotFeature} requires the expression data and
a list of genes of interest.
The parameter \Robject{trendyOut} are the results from the \Rfunction{trendy} 
function.
If it is not specified, then \Rfunction{plotFeature} will run 
\Rfunction{trendy} on the genes of interest before plotting.
Specifying the output obtained from previous steps will save time by avoiding 
fitting the models again.

Similarly, to plot the top six genes in the second group of genes (first go 
down):

<<eval=TRUE, warning=FALSE, fig.width=7, fig.align='center', out.width='1\\textwidth'>>=
par(mfrow=c(3,2))
plot2 <- plotFeature(Data = trendyExampleData,
                    featureNames = names(res.trend$firstdown)[1:6],
                    trendyOut = res)
@

To plot the two genes in the third group of genes (first no change):
<<eval=TRUE, warning=FALSE, fig.height=5, fig.width=10, fig.align='center'>>=
par(mfrow=c(1,2))
plot2 <- plotFeature(trendyExampleData,
                    featureNames = names(res.trend$firstnochange)[1:2],
                    trendyOut = res)
@

\subsection{Gene specific estimates}

For a given gene of interest, its estimated parameters can be obtained by 
(using g2 as an example):

<<eval=TRUE, fig.height=3, fig.width=4, fig.align='center'>>=
par(mfrow=c(1,1))
plot2 <- plotFeature(trendyExampleData,
                    featureNames = "g2",
                    trendyOut = res)
res.top$Breakpoints["g2",] # break points
res.top$AdjustedR2["g2"] # adjusted r squared
res.top$Segments["g2",] # fitted slopes of the segments
res.top$Segment.Pvalues["g2",] # p value of each the segment
@

The above printouts show that for gene g2 the optimal number of breakpoints
is 2. Two estimated breakpoints are around time-points s12 and s30.
The fitted slopes for the 3 segments are 3.31, 0.06 and -2.97, which indicate 
the trend is up-same-down.


These estimates can also be automatically formatted using the function 
\Rfunction{formatResults}
which can be saved as a .txt. or .csv file. The output currently includes the 
estimated slope, p-value, and trend of
each segment, the estimated breakpoints, the trend for each sample, and the 
adjusted $R^2$.

<<eval=TRUE>>=
trendy.summary <- formatResults(res.top)
trendy.summary[1:4,1:4]
# write.table(trendy.summary, file="trendy_summary.txt")
@
The NA indicates that g3 does not have a segment 3 slope since it only has one
breakpoint (i.e two segments).


\subsection{Breakpoint distribution over the time course}

To calculate number of breakpoints over the time course:

<<eval=TRUE, warning=FALSE, fig.height=3.5, fig.width=7, fig.align='center', out.width='.8\\textwidth'>>=
res.bp <- breakpointDist(res.top)
barplot(res.bp, ylab="Number of breakpoint", col="blue")
@

The bar plot indicates that a number of genes have breakpoints around s12 and 
s13.

\section{More advanced analysis}

\subsection{Time course with non-uniform sampling}
If the samples were collected with different time intervals then it is highly 
suggested to
use the original time (instead of a vector of consecutive numbers). To do so,
the user may specify the order/times via the tVectIn parameter in the 
\Rfunction{trendy} function.

For example, suppose for the example data, the first 30 samples were collected
every hour and the other 10 samples were collected every 5 hours. We may 
define the time vector as:
<<eval=TRUE>>=
t.v <- c(1:30, seq(31, 80, 5))
names(t.v) <- colnames(trendyExampleData)
t.v
@

To run Trendy model using the empirical collecting time instead of sample 
ID (1-40):

<<eval=TRUE, warning=FALSE, fig.height=7, fig.width=7, fig.align='center', out.width='.8\\textwidth'>>=
res2 <- trendy(Data = trendyExampleData, tVectIn = t.v, maxK=2)
res2 <- results(res2)
res.top2 <- topTrendy(res2)
res.trend2 <- trendHeatmap(res.top2)
str(res.trend2)
@

To plot the first six genes that have up-regulated pattern at the beginning of
the time course:
<<eval=TRUE>>=
par(mfrow=c(3,2))
plot1.new <- plotFeature(trendyExampleData, tVectIn=t.v,
                        featureNames = names(res.trend2$firstup)[1:6],
                        trendyOut = res2)
@

\subsection{Time-course with replicates available}
Trendy is able to make use of replicated time-points if available. To do so,
the user can specify the replicated directly into the the tVectIn parameter in the 
\Rfunction{trendy} function.

For example, suppose for the example data, 10 time points were observed 4 times each. We may 
define the time vector as:
<<eval=TRUE>>=
t.v <- rep(1:10, each=4)
names(t.v) <- colnames(trendyExampleData)
t.v
@

<<eval=TRUE, warning=FALSE, fig.height=7, fig.width=7, fig.align='center', out.width='.8\\textwidth'>>=
res2 <- trendy(Data = trendyExampleData, tVectIn = t.v, maxK=2)
res2 <- results(res2)
res.top2 <- topTrendy(res2)
res.trend2 <- trendHeatmap(res.top2)
str(res.trend2)
@


\section{Extract genes with certain pattern}
Genes that have a peak along the time-course will have fitted trend somewhere 
as "up-down". Genes that are oscillating may have the fitted trend "up-down". 
To extract a list of such genes we can use the \Rfunction{extractPattern}:

<<eval=TRUE, warning=FALSE, fig.height=7, fig.width=7, fig.align='center', out.width='.8\\textwidth'>>=
# Genes that peak
pat1 <- extractPattern(res2, Pattern = c("up","down"))
head(pat1)
par(mfrow=c(3,2))
plotPat1 <- plotFeature(trendyExampleData, tVectIn=t.v,
                      featureNames = pat1$Gene[1:6],
                      trendyOut = res2)

@


<<eval=TRUE, warning=FALSE, fig.height=3.5, fig.width=7, fig.align='center', out.width='.8\\textwidth'>>=
# Genes that peak after some time
pat3 <- extractPattern(res2, Pattern = c("up","down"), Delay = 25)
head(pat3)
par(mfrow=c(1,2))
plotPat3 <- plotFeature(trendyExampleData, tVectIn=t.v,
                      featureNames = pat3$Gene,
                      trendyOut = res2)
@

<<eval=FALSE, warning=FALSE, fig.height=3.5, fig.width=7, fig.align='center', out.width='.8\\textwidth'>>=
# Genes that are constant, none
pat4 <- extractPattern(res2, Pattern = c("same"))
@


\section{Further analysis of Trendy expression trends}
For each gene, the Trendy segments are assigned a direction as: "up", "down", or "same".
These directions can be used to cluster genes having similar trends along the time-course. Here I will use
a simple hierarchical clustering to demonstrate the clustering but other clustering methods may be applicable.

<<eval=TRUE, warning=FALSE, fig.height=3, fig.width=3, fig.align='center', out.width='.3\\textwidth'>>=
# Get trend matrix:
trendMat <- res.top$Trends
# Cluster genes using hierarchical clustering:
hc.results <- hclust(dist(trendMat))
plot(hc.results) #decide how many cluster to choose
#Let's say there are 4 main clusters
hc.groups <- cutree(hc.results, k = 4)

cluster1.genes <- names(which(hc.groups == 1))
res.trend2 <- trendHeatmap(res.top, featureNames = cluster1.genes)

cluster4.genes <- names(which(hc.groups == 4))
res.trend2 <- trendHeatmap(res.top, featureNames = cluster4.genes)
@

The genes in each cluster can then be input to a gene enrichment analysis, using tools such as enrichr, allez, or GSEA.





\section{Additional options}
In the \Rfunction{trendy} function,
the thresholds $c_{num}$and  $c_{pval}$
can be specified via parameters
minNumInSeg and pvalCut, respectively.

\section{Trendy shiny app}

The Trendy shiny app requires an .RData object output from the
\Rfunction{trendy} function, which can be obtained by setting \Rcode{saveObject=TRUE}.

<<eval=TRUE, warning=FALSE>>=
res <- trendy(trendyExampleData, maxK=2, saveObject = TRUE, fileName="exampleObject")
res <- results(res)
@

Then in R run:
<<eval=FALSE, warning=FALSE>>=
trendyShiny()
@

\begin{figure}[H]
\centering
\includegraphics[width=1\textwidth]{Shiny_UploadData.png}
\caption{Upload shiny object}
\end{figure}


\begin{figure}[H]
\centering
\includegraphics[width=1\textwidth]{Shing_allGenePat.png}
\caption{Find all genes with a given pattern}
\end{figure}


\begin{figure}[H]
\centering
\includegraphics[width=1\textwidth]{Shiny_geneViz.png}
\caption{Search genes individually}
\end{figure}

\newpage

\section{SessionInfo}

<<eval=TRUE, warning=FALSE, tidy=TRUE>>=
sessionInfo()
@






\end{document}
