patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
genes
trackNames
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
length(genes)
head(genes)
genes <- do.call(rbind, genes)
genes
head(do.call(rbind, genes))
head(genes)
genes <- data.frame(Gene = trackNames, do.call(rbind, genes))
#find genes that have peaks at ANY breakpoint
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
length(genes)
genes <- data.frame(Gene = trackNames, do.call(rbind, genes))
head(genes)
pattern = "122"
#find genes that have peaks at ANY breakpoint
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
genes <- data.frame(Gene = trackNames, do.call(rbind, genes))
head(genes)
pattern = "1221"
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
genes <- data.frame(Gene = trackNames, do.call(rbind, genes))
head(genes)
plot(orig.data["Cbx6",])
pattern = c("up", "down")
if(is.null(pattern)) stop("Must specify a pattern")
ogpat <- pattern
##restrict to genes that have certain breakpoint pattern
segdata.radj <- sort(sapply(segdata, function(i)i$radj), decreasing=TRUE) #get radj for each gene
genes.pass <- names(segdata.radj)[which(segdata.radj >= radjcut)] #get genes with fit >= radjcut
segdata.pass <- segdata[genes.pass]
segdata.bks <- sapply(segdata.pass, function(i) i$bp) #Get breakpoints for all genes
segdata.bks[is.na(segdata.bks)] <- 0
segdata.slps <- sapply(segdata.pass, function(i) i$slp.sign) #Get slps for all genes
pattern[pattern == "up"] <- 1
pattern[pattern == "same"] <- 0
pattern[pattern == "down"] <- 2
if(length(pattern) == 1) {
pattern = rep(pattern, length(segdata[[1]]$id.sign))
}
pattern <- paste(pattern, collapse="")
#find genes that have peaks at ANY breakpoint
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
genes <- data.frame(Gene = trackNames, do.call(rbind, genes))
head(genes)
runApp("Desktop/SegReg/")
library(devtools)
install_github("rhondabacher/SegReg/package/SegReg")
runApp("Desktop/SegReg/")
head(genes)
library(devtools)
install_github("rhondabacher/SegReg/package/SegReg")
runApp("Desktop/SegReg/")
head(genes)
str(genes)
genes <- data.frame(Gene = as.character(trackNames), do.call(rbind, genes))
head(genes)
#find genes that have peaks at ANY breakpoint
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
genes <- data.frame(Gene = as.character(trackNames), do.call(rbind, genes))
head(genes)
genes$Gene
trackNames <- as.character(trackNames)
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
trackNames <- as.character(trackNames)
genes <- data.frame(Gene = trackNames, do.call(rbind, genes))
head(genes)
str(genes)
#find genes that have peaks at ANY breakpoint
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
genes <- data.frame(Gene = trackNames, do.call(rbind, genes), stringsAsFactors=FALSE)
str(genes)
head(genes)
library(devtools)
install_github("rhondabacher/SegReg/package/SegReg")
runApp("Desktop/SegReg/package/")
runApp("Desktop/SegReg/")
runApp("Desktop/SegReg/")
seg.all[["Rnft2"]]
seg.all[["Blvra"]]
if(is.null(pattern)) stop("Must specify a pattern")
ogpat <- pattern
radjcut
radjcut = .8
segdata.radj["Blvra"]
which(genes.pass == "Blvra")
tail(genes)
genes.pass
segdata.pass <- segdata[genes.pass]
segdata.pass
segdata.pass <- segdata[[genes.pass]]
radjcut = .8
pattern
if(is.null(pattern)) stop("Must specify a pattern")
ogpat <- pattern
##restrict to genes that have certain breakpoint pattern
segdata.radj <- sort(sapply(segdata, function(i)i$radj), decreasing=TRUE) #get radj for each gene
genes.pass <- names(segdata.radj)[which(segdata.radj >= radjcut)] #get genes with fit >= radjcut
segdata.pass <- segdata[genes.pass]
segdata.bks <- sapply(segdata.pass, function(i) i$bp) #Get breakpoints for all genes
segdata.bks[is.na(segdata.bks)] <- 0
segdata.slps <- sapply(segdata.pass, function(i) i$slp.sign) #Get slps for all genes
pattern[pattern == "up"] <- 1
pattern[pattern == "same"] <- 0
pattern[pattern == "down"] <- 2
if(length(pattern) == 1) {
pattern = rep(pattern, length(segdata[[1]]$id.sign))
}
pattern <- paste(pattern, collapse="")
#find genes that have peaks at ANY breakpoint
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
genes <- data.frame(Gene = trackNames, do.call(rbind, genes), stringsAsFactors=FALSE)
head(genes)
tail(genes)
genes.pass
radjcut = .8
if(is.null(pattern)) stop("Must specify a pattern")
ogpat <- pattern
##restrict to genes that have certain breakpoint pattern
segdata.radj <- sort(sapply(segdata, function(i)i$radj), decreasing=TRUE) #get radj for each gene
genes.pass <- names(segdata.radj)[which(segdata.radj >= radjcut)] #get genes with fit >= radjcut
segdata.pass <- segdata[genes.pass]
segdata.pass
segdata.bks <- sapply(segdata.pass, function(i) i$bp) #Get breakpoints for all genes
segdata.bks[is.na(segdata.bks)] <- 0
segdata.slps <- sapply(segdata.pass, function(i) i$slp.sign) #Get slps for all genes
pattern[pattern == "up"] <- 1
pattern[pattern == "same"] <- 0
pattern[pattern == "down"] <- 2
if(length(pattern) == 1) {
pattern = rep(pattern, length(segdata[[1]]$id.sign))
}
pattern <- paste(pattern, collapse="")
pattern
pattern = "12"
genes <- list()
k <- 1
trackNames <- c()
for (j in 1:length(genes.pass)) {
gslp <- segdata.slps[[genes.pass[j]]]
gslp[gslp == -1] <- 2
if(length(gslp) == 1) { gslp = rep(gslp, length(segdata[[1]]$id.sign))}
slps <- paste(gslp, collapse="")
if(grepl(pattern, slps) == TRUE) {
patstart <- gregexpr(pattern, slps)[[1]]
for(i in 1:length(patstart)) {
if(segdata.bks[[genes.pass[j]]][i] >= delay) {
patend <- patstart[i] + nchar(pattern)-2
brk <- segdata.bks[[genes.pass[j]]][patstart[i]:patend]
names(brk) <- paste0(rep("BreakPoint", nchar(pattern) - 1), 1:(nchar(pattern) - 1))
genes[[k]] <- brk
k = k + 1
trackNames<- c(trackNames, genes.pass[j])
}
}
}
}
genes <- data.frame(Gene = trackNames, do.call(rbind, genes), stringsAsFactors=FALSE)
head(genes)
str(genes)
tail(genes)
head(genes)
runApp("Desktop/SegReg/package/")
runApp("Desktop/SegReg/")
runApp("Desktop/SegReg/")
runApp("Desktop/SegReg/")
head(genes)library(devtools)
install_github("rhondabacher/SegReg/package/SegReg")
runApp("Desktop/SegReg/")
runApp("Desktop/SegReg/")
runApp("Desktop/SegReg/")
runApp("Desktop/SegReg/")
runApp("Desktop/SegReg/")
library(devtools)
library(devtools)
runApp("Desktop/SegReg/")
library(shiny)
runApp("Desktop/SegReg/")
runApp("Desktop/SegReg/")
2^20
XX <- runif(20, .98, 1)
XX
var(XX)
XX <- runif(20, .5, 1)
newV <- c()
for(i in 1:length(XX)) {
YY <- XX[-i]
newV[i] <- var(YY)
}
newV
hist(newV)
hist(newV)
XX <- runif(20, .5, 1)
newV <- c()
for(i in 1:length(XX)) {
YY <- XX[-i]
newV[i] <- var(YY)
}
hist(newV)
newV
XX <- runif(19, .95, 1)
newV <- c()
for(i in 1:length(XX)) {
YY <- XX[-i]
newV[i] <- var(YY)
}
hist(newV)
XX <- runif(19, .95, 1)
XX <-c(.9, XX)
newV <- c()
for(i in 1:length(XX)) {
YY <- XX[-i]
newV[i] <- var(YY)
}
hist(newV)
newV
mean(newV) + 3*sd(newV)
mean(newV) - 3*sd(newV)
XX <- runif(19, .95, 1)
XX <-c(.9, XX)
newV <- XX
mean(newV) + 3*sd(newV)
mean(newV) - 3*sd(newV)
newV
XX <- runif(19, .98, 1)
XX <-c(.9, XX)
newV <- XX
mean(newV) + 3*sd(newV)
mean(newV) - 3*sd(newV)
newV
demo <- read.table("Downloads/anshuldata1.csv", head=T, row.names=1, sep=";", dec=",")
head(demo)
demo <- read.table("Downloads/anshuldata1.csv", header=T, row.names=1, sep=";", dec=",")
head(demo)
?read.table
demo <- read.table("Downloads/anshuldata1.csv", header=T, row.names=1, sep=",", dec=".")
head(demp)
head(demo)
demo <- read.table("Downloads/anshuldata1.csv", head=T, row.names=1, sep=",", dec=".")
head(demo)
demo <- read.table("Downloads/anshuldata1.csv", head=T, row.names=1, sep=",", dec=".")
save(demo, file="XX.rda")
data("XX.rda")
data(XX)
?data
data("XX.rda")
load("XX.rda")
data(list="XX.rda")
data(file="XX.rda")
data(XX)
data("XX")
data(demo)
data(list="XX")
load("Downloads/anshuldata1.rda")
load("Downloads/anshuldata1.rda")
View(demo)
demo <- read.table("Downloads/anshuldata1.csv", head=T, row.names=1, sep=",", dec=".")
save(demo, file="XX.rda")
?MedianNorm
library(EBSeq)
?MedianNorm
MedianNorm
Data = c(1,5,6)
geomeans <- exp(rowMeans(log(Data)))
Data = rbind(c(1,5,6), 2*c(1,5,6))
geomeans <- exp(rowMeans(log(Data)))
Data = rbind(c("1",5,6), 2*c(1,5,6))
geomeans <- exp(rowMeans(log(Data)))
Data = rbind(c("1",5,6), 2*c("1",5,6))
MedianNorm(Data)
Data = rbind(c("1",5,6), 2*c(1,5,6))
MedianNorm(Data)
Data = rbind(c("1",5,6), 2*c(0,5,6))
MedianNorm(Data)
Data = rbind(c(0,5,6), 2*c(0,5,6))
MedianNorm(Data)
str(Data)
Data = data.frame(rbind(c(0,5,6), 2*c(0,5,6)))
MedianNorm(Data)
Data = data.frame(rbind(c(1,5,6), 2*c(1,5,6)))
MedianNorm(Data)
Data = data.frame(rbind(c(1,5,6), 2*c("1",5,6)))
Data = data.frame(rbind(c("1",5,6), 2*c(1,5,6)))
Data = data.frame(rbind(c(1,5,6), 2*c("1",5,6)))
Data = data.frame(rbind(c("1",5,6), 2*c(1,5,6)))
MedianNorm(Data)
library(devtools)
devtools::install_github("rhondabacher/SCnorm")
data(bulkH1data)
library(SCnorm)
data(bulkH1data)
Conditions <- rep(1, dim(bulkH1data)[2])
data(scH1data)
Conditions <- rep(c("1M", "4M"), each=92)
checkCountDepth(Data = scH1data, Condition = Conditions, OutputName = "check_scData", FilterCellProportion = .1, FilterExpression = 2)
getwd()
DataNorm <- SCnorm(scH1data, Conditions, OutputName = "MyNormalizedData",PLOT=TRUE, FilterCellNum = 10)
library(SCnorm)
data(ExampleData)
str(ExampleData)
Conditions = rep(c(1,2), each= 90)
str(Conditions)
Conditions = rep(c(1,2), each= 90)
DataNorm <- SCnorm(ExampleData, Conditions, OutputName = "MyNormalizedData",
SavePDF=TRUE, FilterCellNum = 10)
?poly
library(devtools)
setwd("~/Desktop/Trendy/package/Trendy")
document()
document()
document()
getwd()
devtools::document()
devtools::document()
devtools::document()
