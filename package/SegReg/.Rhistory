seed.use2 <- seed.use
while("try-error"%in%class(lmseg.try) & seed.use2<=num.try){
seed.use2 <- seed.use2 + 1
lmseg.try <- suppressMessages(try(segmented(lm1, seg.Z = ~t.use, psi = round(seq(1, t.l, length.out = i+2)[2:(i+1)]), control = seg.control(seed = seed.use2)),silent=T))
}
out <- lmseg.try
}, simplify = F)
isna <- which(sapply(fit.l.0, function(i) "try-error"%in%class(i)))
if (length(isna) == maxk) {
out <- list(id.sign = lm.id.sign, slp = lm.slp, slp.sign = lm.sign, slp.pval = lm.pval,
bp = NA, fitted = lm.fit, radj = lm.radj, fit = lm1)
if (keepfit == FALSE) out <- out[1:7]
return(out)
# if it is not solved in 100 trys then return lm results (if num.try=100)
break
}
fit.l <- fit.l.0
if (length(isna) > 0) { # if one of step.r cant be fitted then remove it.
fit.l <- fit.l.0[-isna]
step.r <- step.r[-isna]
}
slp.l <- sapply(fit.l, slope, simplify=F)
rsq <- sapply(fit.l, function(i) summary(i)$r.squared)
radj <- sapply(fit.l, function(i) summary(i)$adj.r.squared)
brk.l <- sapply(fit.l ,function(i) i$psi[,2], simplify=F)
id.l <- sapply(fit.l, function(i) i$id.group, simplify=F)
if(forceRadj == TRUE) {rsq = radj}
if (length(step.r) > 1) {
rsq.diff <- diff(rsq) # get differences in R^2
rsq.whichmax <- which(rsq.diff > cutdiff)
radj.max <- max(radj)
rsq.max <- max(rsq)
if (length(rsq.whichmax) > 0) r.choose <- max(rsq.whichmax) + 1 # start with the largest difference in rsq value
# compare here using adjusted Rsq.
if (length(rsq.whichmax) == 0 & radj[1] > lm.radj) r.choose <- 1 #if none larger than diff use smallest bp =1
if (length(rsq.whichmax) == 0 & radj[1] <= lm.radj) {
# if none of them satisfy, then take the linear, return values
out <- list(id.sign=lm.id.sign, slp=lm.slp, slp.sign=lm.sign, slp.pval=lm.pval,
bp=NA, fitted=lm.fit,radj=lm.radj,fit=lm1)
if (keepfit == FALSE) out <- out[1:7]
return(out)
}
#now make sure that optimal value satisfies having minimum number of segments, if it does not then decrease breakpoints.
while ((min(table(id.l[[r.choose]])) < min.num.in.seg) & r.choose > 1) r.choose <- r.choose - 1
if(r.choose == 1 & (min(table(id.l[[r.choose]])) < min.num.in.seg)) {
# if 1 bp gives small segment, then take the linear
out <- list(id.sign=lm.id.sign, slp=lm.slp, slp.sign=lm.sign, slp.pval=lm.pval,
bp=NA, fitted=lm.fit,radj=lm.radj,fit=lm1)
if(keepfit==FALSE)out <- out[1:7]
return(out)
}
}
if (length(step.r) == 1) {
r.choose <- 1
radj.max <- radj
}
# finally decide if best BP model is better than linear
if(radj.max < lm.radj | rsq.max - lm.rsq < cutdiff){
out <- list(id.sign=lm.id.sign, slp=lm.slp, slp.sign=lm.sign, slp.pval=lm.pval,
bp=NA, fitted=lm.fit,radj=lm.radj,fit=lm1)
if(keepfit==FALSE)out <- out[1:7]
return(out)
# if lm is better
break
}
r.choose.ori <- step.r[r.choose] # actual k (before remove the NA fitting)
fit.choose <- fit.l[[r.choose]]
fv.choose <- fitted.values(fit.choose)
bp.choose <- brk.l[[r.choose]]
slp.choose <- slp.l[[r.choose]][[1]][,1]
slp.t <- slp.l[[r.choose]][[1]][,3]
slp.pval <- pt(-abs(slp.t),1)
slp.sign <- ifelse(slp.t > 0, 1, -1)
slp.sign[which(slp.pval > pvalcut)] <- 0
id.choose <- id.l[[r.choose]]
id.sign <- slp.sign[id.choose + 1]
names(id.sign) <- colnames(data)
out = list(id.sign=id.sign, slp=slp.choose, slp.sign=slp.sign, slp.pval=slp.pval, bp=bp.choose, fitted=fv.choose,radj=radj[r.choose],fit=fit.choose)
if(keepfit == FALSE) out <- out[1:7]
out
}
TEST <- fit.seg(data = SegRegExData[1,],
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
TEST
j=2
plot(SegRegExData[j,])
TEST <- fit.seg(data = SegRegExData[j,],
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
fit.seg(data = SegRegExData[j,],
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
data = SegRegExData[1,];
maxk = 3;
j=3
plot(SegRegExData[j,])
fit.seg(data = SegRegExData[j,],
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
j=4
plot(SegRegExData[j,])
fit.seg(data = SegRegExData[j,],
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
j=5
plot(SegRegExData[j,])
fit.seg(data = SegRegExData[j,],
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
j=6
TRY <- segreg(data = SegRegExData,
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
library(SegReg)
fit.seg <- function(data, maxk=5, t.vect=NULL,min.num.in.seg=5, pvalcut=.1,
cutdiff=.1, num.try=100,keepfit=FALSE, forceRadj = FALSE) {
data.norm <- data
library(segmented)
t.use <- 1:length(data.norm)
t.l <- length(data.norm)
if(!is.null(t.vect)) {
t.use <- t.vect
t.l <- t.vect[length(t.vect)]
}
step.r <- c(1:maxk)
dat.tmp <- data.norm
seed.use <- 1
# start with lm without bp
lm1 <- lm(dat.tmp ~ t.use)
lm.radj <- summary(lm1)$adj.r.squared
lm.rsq <- summary(lm1)$r.squared
lm.slp <- coef(lm1)[2]
lm.fit <- fitted.values(lm1)
lm.pval <- coef(summary(lm1))[2,4]
lm.sign <- ifelse(lm.slp>0,1,-1)
lm.sign[which(lm.pval > pvalcut)] <- 0
lm.id.sign <- rep(lm.sign, length(t.use))
# fit all possible breakpoints now:
fit.l.0 <- sapply(1:length(step.r), function(j) {
i <- step.r[j]
lmseg.try <- suppressMessages(try(segmented(lm1, seg.Z = ~t.use, psi = round(seq(1, t.l, length.out = i+2)[2:(i+1)]), control = seg.control(seed = seed.use)),silent=T))
seed.use2 <- seed.use
while("try-error"%in%class(lmseg.try) & seed.use2<=num.try){
seed.use2 <- seed.use2 + 1
lmseg.try <- suppressMessages(try(segmented(lm1, seg.Z = ~t.use, psi = round(seq(1, t.l, length.out = i+2)[2:(i+1)]), control = seg.control(seed = seed.use2)),silent=T))
}
out <- lmseg.try
}, simplify = F)
isna <- which(sapply(fit.l.0, function(i) "try-error"%in%class(i)))
if (length(isna) == maxk) {
out <- list(id.sign = lm.id.sign, slp = lm.slp, slp.sign = lm.sign, slp.pval = lm.pval,
bp = NA, fitted = lm.fit, radj = lm.radj, fit = lm1)
if (keepfit == FALSE) out <- out[1:7]
return(out)
# if it is not solved in 100 trys then return lm results (if num.try=100)
break
}
fit.l <- fit.l.0
if (length(isna) > 0) { # if one of step.r cant be fitted then remove it.
fit.l <- fit.l.0[-isna]
step.r <- step.r[-isna]
}
slp.l <- sapply(fit.l, slope, simplify=F)
rsq <- sapply(fit.l, function(i) summary(i)$r.squared)
radj <- sapply(fit.l, function(i) summary(i)$adj.r.squared)
brk.l <- sapply(fit.l ,function(i) i$psi[,2], simplify=F)
id.l <- sapply(fit.l, function(i) i$id.group, simplify=F)
if(forceRadj == TRUE) {rsq = radj}
if (length(step.r) > 1) {
rsq.diff <- diff(rsq) # get differences in R^2
rsq.whichmax <- which(rsq.diff > cutdiff)
radj.max <- max(radj)
rsq.max <- max(rsq)
if (length(rsq.whichmax) > 0) r.choose <- max(rsq.whichmax) + 1 # start with the largest difference in rsq value
# compare here using adjusted Rsq.
if (length(rsq.whichmax) == 0 & radj[1] > lm.radj) r.choose <- 1 #if none larger than diff use smallest bp =1
if (length(rsq.whichmax) == 0 & radj[1] <= lm.radj) {
# if none of them satisfy, then take the linear, return values
out <- list(id.sign=lm.id.sign, slp=lm.slp, slp.sign=lm.sign, slp.pval=lm.pval,
bp=NA, fitted=lm.fit,radj=lm.radj,fit=lm1)
if (keepfit == FALSE) out <- out[1:7]
return(out)
}
#now make sure that optimal value satisfies having minimum number of segments, if it does not then decrease breakpoints.
while ((min(table(id.l[[r.choose]])) < min.num.in.seg) & r.choose > 1) r.choose <- r.choose - 1
if(r.choose == 1 & (min(table(id.l[[r.choose]])) < min.num.in.seg)) {
# if 1 bp gives small segment, then take the linear
out <- list(id.sign=lm.id.sign, slp=lm.slp, slp.sign=lm.sign, slp.pval=lm.pval,
bp=NA, fitted=lm.fit,radj=lm.radj,fit=lm1)
if(keepfit==FALSE)out <- out[1:7]
return(out)
}
}
if (length(step.r) == 1) {
r.choose <- 1
radj.max <- radj
}
# finally decide if best BP model is better than linear
if(radj.max < lm.radj | rsq.max - lm.rsq < cutdiff){
out <- list(id.sign=lm.id.sign, slp=lm.slp, slp.sign=lm.sign, slp.pval=lm.pval,
bp=NA, fitted=lm.fit,radj=lm.radj,fit=lm1)
if(keepfit==FALSE)out <- out[1:7]
return(out)
# if lm is better
break
}
r.choose.ori <- step.r[r.choose] # actual k (before remove the NA fitting)
fit.choose <- fit.l[[r.choose]]
fv.choose <- fitted.values(fit.choose)
bp.choose <- brk.l[[r.choose]]
slp.choose <- slp.l[[r.choose]][[1]][,1]
slp.t <- slp.l[[r.choose]][[1]][,3]
slp.pval <- pt(-abs(slp.t),1)
slp.sign <- ifelse(slp.t > 0, 1, -1)
slp.sign[which(slp.pval > pvalcut)] <- 0
id.choose <- id.l[[r.choose]]
id.sign <- slp.sign[id.choose + 1]
names(id.sign) <- colnames(data)
out = list(id.sign=id.sign, slp=slp.choose, slp.sign=slp.sign, slp.pval=slp.pval, bp=bp.choose, fitted=fv.choose,radj=radj[r.choose],fit=fit.choose)
if(keepfit == FALSE) out <- out[1:7]
out
}
TRY <- segreg(data = SegRegExData,
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
plotmarker(SegRegExData, t.v, filename="Desktop/GR.pdf", fittedres=TRT,pdf=T)
plotmarker(SegRegExData, t.vect, filename="Desktop/GR.pdf", fittedres=TRT,pdf=T)
plotmarker(SegRegExData, t.vect, filename="Desktop/GR.pdf", listnames=rownames(SegRegExData), fittedres=TRT,pdf=T)
?plotmarker
rownames(SegRegExData)
plotmarker(SegRegExData, t.vect, filename="Desktop/GR.pdf", listnames=rownames(SegRegExData), fittedres=TRT, pdf=T)
plotmarker(SegRegExData, t.vect, filename="Desktop/GR.pdf", listname=rownames(SegRegExData), fittedres=TRT, pdf=T)
plotmarker(SegRegExData, t.vect, filename="Desktop/GR.pdf", listname=rownames(SegRegExData), fittedres=TRY, pdf=T)
j=50
plot(SegRegExData[j,])
data = SegRegExData[50,];
maxk = 3;
t.vect = t.vect;
min.num.in.seg = 5;
pvalcut = .2;
cutdiff = .05;
num.try = 100
data.norm <- data
library(segmented)
t.use <- 1:length(data.norm)
t.l <- length(data.norm)
if(!is.null(t.vect)) {
t.use <- t.vect
t.l <- t.vect[length(t.vect)]
}
step.r <- c(1:maxk)
dat.tmp <- data.norm
seed.use <- 1
lm1 <- lm(dat.tmp ~ t.use)
lm.radj <- summary(lm1)$adj.r.squared
lm.rsq <- summary(lm1)$r.squared
lm.slp <- coef(lm1)[2]
lm.fit <- fitted.values(lm1)
lm.pval <- coef(summary(lm1))[2,4]
lm.sign <- ifelse(lm.slp>0,1,-1)
lm.sign[which(lm.pval > pvalcut)] <- 0
lm.id.sign <- rep(lm.sign, length(t.use))
fit.l.0 <- sapply(1:length(step.r), function(j) {
i <- step.r[j]
lmseg.try <- suppressMessages(try(segmented(lm1, seg.Z = ~t.use, psi = round(seq(1, t.l, length.out = i+2)[2:(i+1)]), control = seg.control(seed = seed.use)),silent=T))
seed.use2 <- seed.use
while("try-error"%in%class(lmseg.try) & seed.use2<=num.try){
seed.use2 <- seed.use2 + 1
lmseg.try <- suppressMessages(try(segmented(lm1, seg.Z = ~t.use, psi = round(seq(1, t.l, length.out = i+2)[2:(i+1)]), control = seg.control(seed = seed.use2)),silent=T))
}
out <- lmseg.try
}, simplify = F)
isna <- which(sapply(fit.l.0, function(i) "try-error"%in%class(i)))
isna
if (length(isna) == maxk) {
out <- list(id.sign = lm.id.sign, slp = lm.slp, slp.sign = lm.sign, slp.pval = lm.pval,
bp = NA, fitted = lm.fit, radj = lm.radj, fit = lm1)
if (keepfit == FALSE) out <- out[1:7]
return(out)
# if it is not solved in 100 trys then return lm results (if num.try=100)
break
}
fit.l <- fit.l.0
if (length(isna) > 0) { # if one of step.r cant be fitted then remove it.
fit.l <- fit.l.0[-isna]
step.r <- step.r[-isna]
}
slp.l <- sapply(fit.l, slope, simplify=F)
rsq <- sapply(fit.l, function(i) summary(i)$r.squared)
radj <- sapply(fit.l, function(i) summary(i)$adj.r.squared)
brk.l <- sapply(fit.l ,function(i) i$psi[,2], simplify=F)
id.l <- sapply(fit.l, function(i) i$id.group, simplify=F)
rsq
radj
length(step.r)
rsq.diff <- diff(rsq) # get differences in R^2
rsq.whichmax <- which(rsq.diff > cutdiff)
radj.max <- max(radj)
rsq.max <- max(rsq)
rsq.diff
rsq.whichmax
radj.max
rsq.max
length(rsq.whichmax)
if (length(rsq.whichmax) > 0) r.choose <- max(rsq.whichmax) + 1 # start with the largest difference in rsq value
r.choose
# compare here using adjusted Rsq.
if (length(rsq.whichmax) == 0 & radj[1] > lm.radj) r.choose <- 1 #if none larger than diff use smallest bp =1
if (length(rsq.whichmax) == 0 & radj[1] <= lm.radj) {
# if none of them satisfy, then take the linear, return values
out <- list(id.sign=lm.id.sign, slp=lm.slp, slp.sign=lm.sign, slp.pval=lm.pval,
bp=NA, fitted=lm.fit,radj=lm.radj,fit=lm1)
if (keepfit == FALSE) out <- out[1:7]
return(out)
}
while ((min(table(id.l[[r.choose]])) < min.num.in.seg) & r.choose > 1) r.choose <- r.choose - 1
r.choose
length(step.r)
radj.max
lm.radj
rsq.max
lm.rsq
cutdiff
rsq.max - lm.rsq
lm.radj
lm.rsq
rsq
radj
View(fit.seg)
rm(fit.seg)
library(SegReg)
TRY <- segreg(data = SegRegExData,
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
plotmarker(SegRegExData, t.vect, filename="Desktop/GR2.pdf", listname=rownames(SegRegExData), fittedres=TRY, pdf=T)
TRY <- topsegreg(TRY)
plotmarker(SegRegExData, t.vect, filename="Desktop/GR2.pdf", listname=rownames(SegRegExData), fittedres=TRY, pdf=T)
TRY
names(TRY)
res.top$radj
TRY$radj
plotmarker(SegRegExData, t.vect, filename="Desktop/GR2.pdf", listname=names(TRY$radj), fittedres=TRY, pdf=T)
library(SegReg)
TRY <- segreg(data = SegRegExData,
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
?topsegreg
TRY <- topsegreg(TRY)
plotmarker(SegRegExData, t.vect, filename="Desktop/GR2.pdf", listname=names(TRY$radj), fittedres=TRY, pdf=T)
hm<-plotmarker(SegRegExData, t.vect, filename="Desktop/GR2.pdf", listname=names(TRY$radj), fittedres=TRY, pdf=T)
names(TRY$radj)
str(TRY)
TRY <- segreg(data = SegRegExData,
maxk = 3,
t.vect = t.vect,
min.num.in.seg = 5,
pvalcut = .2,
cutdiff = .05,
num.try = 100)
names(TRY)
hm<-plotmarker(SegRegExData, t.vect, filename="Desktop/GR2.pdf", listname=names(TRY2$radj), fittedres=TRY[names(TRY2$radj)], pdf=T)
TRY2 <- topsegreg(TRY)
hm<-plotmarker(SegRegExData, t.vect, filename="Desktop/GR2.pdf", listname=names(TRY2$radj), fittedres=TRY[names(TRY2$radj)], pdf=T)
j = 6
plot(SegRegExData[j,])
data = SegRegExData[6,];
maxk = 3;
t.vect = t.vect;
min.num.in.seg = 5;
pvalcut = .2;
cutdiff = .05;
num.try = 100
data.norm <- data
library(segmented)
t.use <- 1:length(data.norm)
t.l <- length(data.norm)
if(!is.null(t.vect)) {
t.use <- t.vect
t.l <- t.vect[length(t.vect)]
}
step.r <- c(1:maxk)
dat.tmp <- data.norm
seed.use <- 1
# start with lm without bp
lm1 <- lm(dat.tmp ~ t.use)
lm.radj <- summary(lm1)$adj.r.squared
lm.rsq <- summary(lm1)$r.squared
lm.slp <- coef(lm1)[2]
lm.fit <- fitted.values(lm1)
lm.pval <- coef(summary(lm1))[2,4]
lm.sign <- ifelse(lm.slp>0,1,-1)
lm.sign[which(lm.pval > pvalcut)] <- 0
lm.id.sign <- rep(lm.sign, length(t.use))
# fit all possible breakpoints now:
fit.l.0 <- sapply(1:length(step.r), function(j) {
i <- step.r[j]
lmseg.try <- suppressMessages(try(segmented(lm1, seg.Z = ~t.use, psi = round(seq(1, t.l, length.out = i+2)[2:(i+1)]), control = seg.control(seed = seed.use)),silent=T))
seed.use2 <- seed.use
while("try-error"%in%class(lmseg.try) & seed.use2<=num.try){
seed.use2 <- seed.use2 + 1
lmseg.try <- suppressMessages(try(segmented(lm1, seg.Z = ~t.use, psi = round(seq(1, t.l, length.out = i+2)[2:(i+1)]), control = seg.control(seed = seed.use2)),silent=T))
}
out <- lmseg.try
}, simplify = F)
isna <- which(sapply(fit.l.0, function(i) "try-error"%in%class(i)))
if (length(isna) == maxk) {
out <- list(id.sign = lm.id.sign, slp = lm.slp, slp.sign = lm.sign, slp.pval = lm.pval,
bp = NA, fitted = lm.fit, radj = lm.radj, fit = lm1)
if (keepfit == FALSE) out <- out[1:7]
return(out)
# if it is not solved in 100 trys then return lm results (if num.try=100)
break
}
fit.l <- fit.l.0
if (length(isna) > 0) { # if one of step.r cant be fitted then remove it.
fit.l <- fit.l.0[-isna]
step.r <- step.r[-isna]
}
slp.l <- sapply(fit.l, slope, simplify=F)
rsq <- sapply(fit.l, function(i) summary(i)$r.squared)
radj <- sapply(fit.l, function(i) summary(i)$adj.r.squared)
brk.l <- sapply(fit.l ,function(i) i$psi[,2], simplify=F)
id.l <- sapply(fit.l, function(i) i$id.group, simplify=F)
length(step.r)
rsq.diff <- diff(rsq) # get differences in R^2
rsq.diff
rsq.whichmax <- which(rsq.diff > cutdiff)
radj.max <- max(radj)
rsq.max <- max(rsq)
rsq.whichmax
cutdiff
radj.max
rsq.max
length(rsq.whichmax)
radj
lm.radj
if (length(rsq.whichmax) == 0 & radj[1] > lm.radj) r.choose <- 1 #if none larger than diff use smallest bp =1
r.choose
while ((min(table(id.l[[r.choose]])) < min.num.in.seg) & r.choose > 1) r.choose <- r.choose - 1
r.choose
(min(table(id.l[[r.choose]]))
)
radj.max
lm.radj
rsq.max
lm.rsq
cutdiff
library(devtools)
setwd("~/Desktop/SegReg/package/SegReg")
document()
setwd("..")
setwd("~/Desktop/SegReg/package/SegReg")
document()
setwd("..")
install("SegReg")
document()
install("SegReg")
setwd("~/Desktop/SegReg/package/SegReg")
document()
document()
document()
document()
setwd("..")
install("SegReg")
setwd("~/Desktop/SegReg/package/SegReg")
ls()
document()
?document
document()
document()
load("~/Downloads/GSCA.RData")
